// --------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã ---------
const GAME_CONFIG = {
    startMoney: 1500,
    startParts: {
        battery: 5,
        motherboard: 2,
        cpu: 2,
        gpu: 1,
        case: 1,
        ram: 4
    },
    partCost: {
        battery: 10,
        motherboard: 50,
        cpu: 40,
        gpu: 100,
        case: 25,
        ram: 20
    },
    upgradeCost: 100, // –∞–ø–≥—Ä–µ–π–¥ —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    supplyUpgradeCost: 10000, // —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫
    supplyInterval: 35000,    // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –º—Å (35 —Å–µ–∫)
    supplyAmount: {            // —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 35 —Å–µ–∫
        battery: 2,
        motherboard: 1,
        cpu: 1,
        gpu: 1,
        case: 1,
        ram: 2
    },
    employeeSpeedIncrease: 0.5,
    orderInterval: 3000,
    employeeSpeedIncrementEvery: 5,
    maxOrders: 10,         // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤
    orderIncreaseCost: 5000, // —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    employeeMaxSpeed: 10,
    EMPLOYEE_AVATARS: ['üë®‚Äçüîß','üë©‚Äçüîß','üë®‚Äçüî¨','üë©‚Äçüî¨','üßë‚Äçüíª','üë®‚Äçüè≠']
};

// --------- –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------
let gameState = {
    money: GAME_CONFIG.startMoney,
    parts: {...GAME_CONFIG.startParts},
    employees: [],
    orders: [],
    lastOrderTime: Date.now(),
    orderCount: 0,
    totalOrdersCompleted: 0,
    currentShopTab: 'parts',
    supplyActive: false
};

// --------- DOM —ç–ª–µ–º–µ–Ω—Ç—ã ---------
const moneyElement = document.getElementById('money');
const partsElement = document.getElementById('parts');
const employeeListElement = document.getElementById('employeeList');
const orderListElement = document.getElementById('orderList');
const shopPartsBtn = document.getElementById('shopPartsBtn');
const shopEmployeesBtn = document.getElementById('shopEmployeesBtn');
const shopUpgradesBtn = document.getElementById('shopUpgradesBtn');
const shopContentElement = document.getElementById('shopContent');

// --------- –ò–∫–æ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π ---------
const PART_ICONS = {
    battery: 'üîã',
    motherboard: 'üíª',
    cpu: 'üñ•Ô∏è',
    gpu: 'üéÆ',
    case: 'üñ±Ô∏è',
    ram: 'üìÄ'
};

// --------- UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---------
function updateUI() {
    moneyElement.textContent = gameState.money;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
    let partsText = '';
    for(const key in gameState.parts){
        partsText += `${PART_ICONS[key]} ${gameState.parts[key]}  `;
    }
    partsElement.textContent = partsText;

    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    employeeListElement.innerHTML = '';
    gameState.employees.forEach((emp,index)=>{
        const card = document.createElement('div');
        card.className='employee-card';
        card.innerHTML=`
            <div class="text-4xl mb-2">${emp.avatar}</div>
            <div class="text-lg font-bold">–°–æ—Ç—Ä—É–¥–Ω–∏–∫ #${index+1}</div>
            <div class="text-sm text-gray-600">–°–∫–æ—Ä–æ—Å—Ç—å: ${emp.speed.toFixed(2)}</div>
            <div class="text-sm text-gray-500">${emp.isBusy ? 'üõ† –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑' : '‚úÖ –°–≤–æ–±–æ–¥–µ–Ω'}</div>
        `;
        employeeListElement.appendChild(card);
    });

    // –ó–∞–∫–∞–∑—ã
    orderListElement.innerHTML='';
    gameState.orders.forEach(order=>{
        const card = document.createElement('div');
        card.className=`order-card ${order.employeeId!==null?'assigned':''}`;
        const progressPercent = Math.min(100, 100 - (order.timeRemaining/order.initialTime)*100);
        let progressColor='#10b981';
        if(progressPercent>50) progressColor='#facc15';
        if(progressPercent>90) progressColor='#ef4444';
        let partsRequiredText = '';
        for(const p in order.partsRequired){
            partsRequiredText += `${PART_ICONS[p]} x${order.partsRequired[p]} `;
        }
        card.innerHTML=`
            <div class="text-lg font-semibold">–ó–∞–∫–∞–∑ #${order.id}</div>
            <div class="text-sm text-gray-500">–¢–µ—Ö–Ω–∏–∫–∞: ${order.type}</div>
            <div class="text-sm text-gray-500">–ù–∞–≥—Ä–∞–¥–∞: üí∞${order.reward}</div>
            <div class="text-sm text-gray-500">–ù—É–∂–Ω–æ –¥–µ—Ç–∞–ª–µ–π: ${partsRequiredText}</div>
            <div class="progress-bar-container">
                <div class="progress-bar" style="width:${progressPercent}%;background-color:${progressColor}"></div>
            </div>
        `;
        orderListElement.appendChild(card);
    });
}

// --------- –ú–∞–≥–∞–∑–∏–Ω ---------
function renderShop(){
    shopContentElement.innerHTML='';

    if(gameState.currentShopTab==='parts'){
        const container = document.createElement('div');
        container.className = 'flex flex-wrap gap-2 justify-center';
        for(const part in GAME_CONFIG.partCost){
            const partContainer = document.createElement('div');
            partContainer.className = 'flex flex-col gap-1 items-center';
            [1,10,100].forEach(amount=>{
                const btn = document.createElement('button');
                btn.textContent = `${PART_ICONS[part]} x${amount} (üí∞${GAME_CONFIG.partCost[part]*amount})`;
                btn.className = 'bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded-md';
                btn.disabled = gameState.money < GAME_CONFIG.partCost[part]*amount;
                btn.dataset.action = 'buyPart';
                btn.dataset.part = part;
                btn.dataset.amount = amount;
                partContainer.appendChild(btn);
            });
            container.appendChild(partContainer);
        }
        shopContentElement.appendChild(container);
    } else if(gameState.currentShopTab==='employees'){
        const btn=document.createElement('button');
        btn.textContent=`–ù–∞–Ω—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (üí∞100)`;
        btn.className='bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-full';
        btn.dataset.action='hireEmployee';
        shopContentElement.appendChild(btn);
    } else if(gameState.currentShopTab==='upgrades'){
        const btn=document.createElement('button');
        btn.textContent=`–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (üí∞${GAME_CONFIG.upgradeCost})`;
        btn.className='bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full';
        btn.dataset.action='upgradeEmployees';
        shopContentElement.appendChild(btn);
        // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
        const btnSupply = document.createElement('button');
        btnSupply.textContent = `–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ (üí∞${GAME_CONFIG.supplyUpgradeCost})`;
        btnSupply.className = 'bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-6 rounded-full';
        btnSupply.dataset.action = 'buySupply';
        btnSupply.disabled = gameState.money < GAME_CONFIG.supplyUpgradeCost || gameState.supplyActive;
        shopContentElement.appendChild(btnSupply);
        const btnExpandOrders = document.createElement('button');
        btnExpandOrders.textContent = `–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ (üí∞${GAME_CONFIG.orderIncreaseCost})`;
        btnExpandOrders.className = 'bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-full mt-2';
        btnExpandOrders.dataset.action = 'expandOrders';
        btnExpandOrders.disabled = gameState.money < GAME_CONFIG.orderIncreaseCost;
        shopContentElement.appendChild(btnExpandOrders);
    }

    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    const resetBtn = document.createElement('button');
    resetBtn.textContent='–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É';
    resetBtn.className='bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded-full mt-4';
    resetBtn.dataset.action='resetGame';
    shopContentElement.appendChild(resetBtn);
}

// --------- –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –º–∞–≥–∞–∑–∏–Ω–∞ ---------
shopContentElement.addEventListener('click', e=>{
    const btn = e.target.closest('button');
    if(!btn || btn.disabled) return;

    if(btn.dataset.action==='buyPart') buyParts(btn.dataset.part, parseInt(btn.dataset.amount));
    else if(btn.dataset.action==='hireEmployee') hireEmployee();
    else if(btn.dataset.action==='upgradeEmployees') upgradeEmployees();
    else if(btn.dataset.action==='buySupply') buySupply();
    else if(btn.dataset.action==='resetGame') resetGame();
    else if(btn.dataset.action==='expandOrders') expandOrders();

    renderShop();
});

// --------- –î–µ–π—Å—Ç–≤–∏—è ---------
function buyParts(part, amount){
    const cost = GAME_CONFIG.partCost[part]*amount;
    if(gameState.money>=cost){
        gameState.money -= cost;
        gameState.parts[part] += amount;
        updateUI();
    } else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

function hireEmployee(){
    const cost = 100;
    if(gameState.money>=cost){
        gameState.money -= cost;
        const avatar = GAME_CONFIG.EMPLOYEE_AVATARS[Math.floor(Math.random()*GAME_CONFIG.EMPLOYEE_AVATARS.length)];
        gameState.employees.push({id:`emp-${Date.now()}`, avatar, speed:1, isBusy:false, ordersCompleted:0});
        updateUI();
    } else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

function upgradeEmployees(){
    if(gameState.money>=GAME_CONFIG.upgradeCost){
        gameState.money -= GAME_CONFIG.upgradeCost;
        gameState.employees.forEach(e=>e.speed += GAME_CONFIG.employeeSpeedIncrease);
        showNotification('–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å—Ç–∞–ª–∏ –±—ã—Å—Ç—Ä–µ–µ!','green');
        updateUI();
    } else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

let supplyIntervalId = null; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–æ–∫
gameState.supplyActive = false; // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–ø–≥—Ä–µ–π–¥

function buySupply(){
    if(gameState.money < GAME_CONFIG.supplyUpgradeCost){
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
        return;
    }
    gameState.money -= GAME_CONFIG.supplyUpgradeCost;
    gameState.supplyActive = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
    supplyIntervalId = setInterval(() => {
        for(const part in GAME_CONFIG.supplyAmount){
            gameState.parts[part] += GAME_CONFIG.supplyAmount[part];
        }
        showNotification('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–∫–ª–∞–¥!','green');
        updateUI();
    }, GAME_CONFIG.supplyInterval);

    showNotification('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!','green');
}
function expandOrders(){
    if(gameState.money >= GAME_CONFIG.orderIncreaseCost){
        gameState.money -= GAME_CONFIG.orderIncreaseCost;
        GAME_CONFIG.maxOrders += 5; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ 5
        showNotification('–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω!','green');
        renderShop();
        updateUI();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
    }
}

function resetGame(){
    if(!confirm('–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?')) return;
    localStorage.removeItem('gameState');
    gameState.money = GAME_CONFIG.startMoney;
    gameState.parts = {...GAME_CONFIG.startParts};
    gameState.employees = [];
    gameState.orders = [];
    gameState.lastOrderTime = Date.now();
    gameState.orderCount = 0;
    const avatar = GAME_CONFIG.EMPLOYEE_AVATARS[Math.floor(Math.random()*GAME_CONFIG.EMPLOYEE_AVATARS.length)];
    gameState.employees.push({id:`emp-${Date.now()}`, avatar, speed:1, isBusy:false, ordersCompleted:0});
    updateUI();
}

// --------- –ó–∞–∫–∞–∑—ã ---------
const ORDER_TEMPLATES = [
    // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–∫–∞–∑—ã
    { type:'–¢–µ–ª–µ—Ñ–æ–Ω', minCompleted:0, partsRequired:{battery:1, cpu:1, ram:1}, initialTime:100, reward:25 },
    { type:'–ù–æ—É—Ç–±—É–∫', minCompleted:5, partsRequired:{battery:2, cpu:1, ram:2, motherboard:1}, initialTime:150, reward:50 },
    { type:'–ü–ö', minCompleted:15, partsRequired:{cpu:1, gpu:1, ram:2, motherboard:1, case:1}, initialTime:200, reward:75 },
    { type:'–°–µ—Ä–≤–µ—Ä', minCompleted:30, partsRequired:{cpu:2, ram:4, motherboard:1, case:1, gpu:2}, initialTime:300, reward:150 },
    // –†–µ–¥–∫–∏–π –∑–∞–∫–∞–∑ (–≤—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä–∞–¥–∞)
    { type:'–°—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä', minCompleted:50, partsRequired:{cpu:4, ram:8, motherboard:2, case:2, gpu:4, battery:5}, initialTime:500, reward:1000, rare:true }
];

function createOrder(){
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if(gameState.orders.length >= GAME_CONFIG.maxOrders) return;
    const available = ORDER_TEMPLATES.filter(o => gameState.totalOrdersCompleted >= o.minCompleted);

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–¥–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10%)
    const rareOrders = available.filter(o => o.rare);
    const normalOrders = available.filter(o => !o.rare);

    let tpl;
    if(rareOrders.length && Math.random() < 0.1){ // 10% —à–∞–Ω—Å —Ä–µ–¥–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
        tpl = rareOrders[Math.floor(Math.random() * rareOrders.length)];
    } else {
        tpl = normalOrders[Math.floor(Math.random() * normalOrders.length)];
    }

    gameState.orders.push({
        id: gameState.orderCount++,
        type: tpl.type,
        partsRequired: {...tpl.partsRequired},
        initialTime: tpl.initialTime,
        timeRemaining: tpl.initialTime,
        reward: tpl.reward,
        employeeId: null
    });
}

// --------- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ---------
function canAssignOrder(order){
    return Object.entries(order.partsRequired).every(([part, qty]) => gameState.parts[part] >= qty);
}

function assignOrderToEmployee(order, emp){
    Object.entries(order.partsRequired).forEach(([part, qty]) => gameState.parts[part] -= qty);
    emp.isBusy = true;
    order.employeeId = emp.id;
}

// --------- –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª ---------
function gameLoop(){
    if(Date.now() - gameState.lastOrderTime > GAME_CONFIG.orderInterval){
        createOrder();
        gameState.lastOrderTime = Date.now();
    }

const unassigned = gameState.orders.filter(o => o.employeeId === null);
const freeEmployees = gameState.employees.filter(e => !e.isBusy);

unassigned.forEach(order => {
    // –ù–∞–π–¥—ë–º –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
    for(let i = 0; i < freeEmployees.length; i++){
        const emp = freeEmployees[i];
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        const canDo = Object.entries(order.partsRequired).every(([part, qty]) => gameState.parts[part] >= qty);
        if(canDo){
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            Object.entries(order.partsRequired).forEach(([part, qty]) => gameState.parts[part] -= qty);
            emp.isBusy = true;
            order.employeeId = emp.id;
            
            // –£–±–∏—Ä–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
            freeEmployees.splice(i, 1);
            break; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
        }
    }
});

    gameState.orders.forEach(order=>{
        if(order.employeeId !== null){
            const emp = gameState.employees.find(e => e.id === order.employeeId);
            if(emp){
                order.timeRemaining -= emp.speed;
                if(order.timeRemaining <= 0){
                    gameState.money += order.reward;
                    gameState.totalOrdersCompleted++;
                    emp.isBusy = false;
                    emp.ordersCompleted++;
                    if(emp.ordersCompleted % GAME_CONFIG.employeeSpeedIncrementEvery === 0 &&
                       emp.speed < GAME_CONFIG.employeeMaxSpeed) emp.speed += 1;
                }
            }
        }
    });

    gameState.orders = gameState.orders.filter(o => o.timeRemaining > 0);
    updateUI();
    saveGame();
}

// --------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ ---------
function saveGame(){ localStorage.setItem('gameState', JSON.stringify(gameState)); }
function loadGame(){
    const s = localStorage.getItem('gameState');
    if(s) gameState = JSON.parse(s);
    if(gameState.employees.length === 0){
        const avatar = GAME_CONFIG.EMPLOYEE_AVATARS[Math.floor(Math.random()*GAME_CONFIG.EMPLOYEE_AVATARS.length)];
        gameState.employees.push({id:`emp-${Date.now()}`, avatar, speed:1, isBusy:false, ordersCompleted:0});
    }
}

// --------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---------
function showNotification(msg,color){
    const n = document.createElement('div');
    n.textContent = msg;
    n.style.background = color;
    n.style.color='white';
    n.style.padding='10px';
    n.style.borderRadius='8px';
    n.style.position='fixed';
    n.style.top='20px';
    n.style.right='20px';
    n.style.zIndex='1000';
    document.body.appendChild(n);
    setTimeout(()=>{n.style.opacity='0';setTimeout(()=>n.remove(),500)},2000);
}

// --------- –í–∫–ª–∞–¥–∫–∏ ---------
shopPartsBtn.addEventListener('click',()=>{gameState.currentShopTab='parts'; renderShop();});
shopEmployeesBtn.addEventListener('click',()=>{gameState.currentShopTab='employees'; renderShop();});
shopUpgradesBtn.addEventListener('click',()=>{gameState.currentShopTab='upgrades'; renderShop();});

// --------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------
loadGame();
updateUI();
setInterval(gameLoop,100);
setInterval(saveGame,1000);
