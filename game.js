// --------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã ---------
const GAME_CONFIG = {
    startMoney: 90000,
    startParts: { battery: 5, motherboard: 5, cpu: 5, gpu: 5, case: 5, ram: 5 },
    partCost: { battery: 10, motherboard: 50, cpu: 40, gpu: 100, case: 25, ram: 20 },
    upgradeCost: 100,
    supplyUpgradeCost: 10000,
    supplyInterval: 35000,
    supplyAmount: { battery: 2, motherboard: 1, cpu: 1, gpu: 1, case: 1, ram: 2 },
    employeeSpeedIncrease: 0.5,
    orderInterval: 3000,
    employeeSpeedIncrementEvery: 5,
    maxOrders: 8,
    orderIncreaseCost: 5000,
    employeeMaxSpeed: 10,
    EMPLOYEE_AVATARS: ['üë®‚Äçüîß','üë©‚Äçüîß','üë®‚Äçüî¨','üë©‚Äçüî¨','üßë‚Äçüíª','üë®‚Äçüè≠']
};

// --------- –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------
let gameState = {
    money: GAME_CONFIG.startMoney,
    parts: {...GAME_CONFIG.startParts},
    employees: [],
    orders: [],
    lastOrderTime: Date.now(),
    orderCount: 0,
    totalOrdersCompleted: 0,
    currentShopTab: 'parts',
    supplyActive: false
};

// --------- DOM —ç–ª–µ–º–µ–Ω—Ç—ã ---------
const moneyElement = document.getElementById('money');
const partsElement = document.getElementById('parts');
const employeeListElement = document.getElementById('employeeList');
const orderListElement = document.getElementById('orderList');
const shopPartsBtn = document.getElementById('shopPartsBtn');
const shopEmployeesBtn = document.getElementById('shopEmployeesBtn');
const shopUpgradesBtn = document.getElementById('shopUpgradesBtn');
const shopContentElement = document.getElementById('shopContent');

// --------- –ò–∫–æ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π ---------
const PART_ICONS = { battery:'üîã', motherboard:'üíª', cpu:'üñ•Ô∏è', gpu:'üéÆ', case:'üñ±Ô∏è', ram:'üìÄ' };

// --------- UI: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –∑–∞–∫–∞–∑—ã ---------
function renderEmployees() {
    const list = document.getElementById("employeeList");
    list.innerHTML = "";

    gameState.employees.forEach(emp => {
        const card = document.createElement("div");
        card.className = "employee-card p-3 border rounded-lg flex flex-col items-center";

        // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        card.innerHTML = `
            <div class="flex flex-col items-center">
                <div class="text-4xl mb-2">${emp.avatar}</div>
                <h3 class="font-bold text-lg">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</h3>
                <p class="text-sm text-gray-500">–í—ã–ø–æ–ª–Ω–∏–ª: ${emp.ordersCompleted}</p>
            </div>
            <div class="mt-3 w-full text-left">
                <h4 class="font-semibold text-sm mb-1">üéÅ –ü–µ—Ä–∫–∏:</h4>
                <ul class="text-xs text-gray-700 space-y-1">
                    ${emp.perks.speedBonus      ? `<li>‚ö° +${Math.round(emp.perks.speedBonus*100)}% —Å–∫–æ—Ä–æ—Å—Ç—å</li>` : ""}
                    ${emp.perks.savePartChance  ? `<li>üîß ${Math.round(emp.perks.savePartChance*100)}% —à–∞–Ω—Å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ—Ç–∞–ª—å</li>` : ""}
                    ${emp.perks.breakPartChance ? `<li>üí• ${Math.round(emp.perks.breakPartChance*100)}% —à–∞–Ω—Å —Å–ª–æ–º–∞—Ç—å –¥–µ—Ç–∞–ª—å</li>` : ""}
                    ${emp.perks.bonusReward     ? `<li>üí∞ +${Math.round(emp.perks.bonusReward*100)}% –Ω–∞–≥—Ä–∞–¥–∞</li>` : ""}
                    ${emp.perks.expBoost        ? `<li>üìö +${Math.round(emp.perks.expBoost*100)}% –æ–ø—ã—Ç</li>` : ""}
                </ul>
            </div>
        `;

        // Drag & Drop
        card.draggable = !emp.isBusy;
        card.addEventListener('dragstart', e => e.dataTransfer.setData('text/plain', emp.id));

        list.appendChild(card);
    });
}

function renderOrders() {
    orderListElement.innerHTML = '';
    gameState.orders.forEach(order => {
        const card = document.createElement('div');
        card.className = 'order-card p-2 border rounded mb-2';
        card.dataset.orderId = order.id;

        if(order.rare) {
            card.style.border = '2px solid gold';
        }

        let partsText = "‚Äî";
        if (order.partsRequired) {
            partsText = Object.entries(order.partsRequired)
                .map(([p, qty]) => `${PART_ICONS[p] || p} x${qty}`).join(' ');
        }

        card.innerHTML = `
            <div class="font-semibold">–ó–∞–∫–∞–∑ #${order.id}</div>
            <div>–¢–µ—Ö–Ω–∏–∫–∞: ${order.type}</div>
            <div style="font-style:italic; color:#555; margin:2px 0;">
                –ó–∞–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ¬´${order.note}¬ª
            </div>
            <div>–ù–∞–≥—Ä–∞–¥–∞: üí∞${order.reward}</div>
            <div>–ù—É–∂–Ω–æ –¥–µ—Ç–∞–ª–µ–π: ${partsText}</div>
            <div class="progress-bar-container" style="width:100%; background:#ccc; border-radius:4px;">
                <div class="progress-bar" style="width:${100 - (order.timeRemaining / order.initialTime) * 100}%;
                    background-color:#10b981;height:8px;border-radius:4px;"></div>
            </div>
            <div class="order-employee" style="margin-top:4px; color:${order.employeeId ? '#10b981' : '#999'}">
                ${order.employeeId ? `–í —Ä–∞–±–æ—Ç–µ: ${gameState.employees.find(e => e.id === order.employeeId)?.avatar}` : '–°–≤–æ–±–æ–¥–µ–Ω'}
            </div>
        `;
        orderListElement.appendChild(card);
    });

    setupOrderDragAndDrop();
}
function updateUI(){
    moneyElement.textContent = gameState.money;
    partsElement.textContent = Object.entries(gameState.parts)
        .map(([key,val])=>`${PART_ICONS[key]} ${val}`).join('  ');

    gameState.employees.forEach(emp=>{
        const card = document.querySelector(`.employee-card[data-emp-id="${emp.id}"]`);
        if(card){
            card.querySelector('.employee-speed').textContent = `–°–∫–æ—Ä–æ—Å—Ç—å: ${emp.speed.toFixed(2)}`;
            card.querySelector('.employee-status').textContent = emp.isBusy ? 'üõ† –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑' : '‚úÖ –°–≤–æ–±–æ–¥–µ–Ω';
            card.draggable = !emp.isBusy;
        }
    });

    gameState.orders.forEach(order=>{
        const card = document.querySelector(`.order-card[data-order-id="${order.id}"]`);
        if(card){
            const progress = Math.min(100, 100-(order.timeRemaining/order.initialTime)*100);
            card.querySelector('.progress-bar').style.width = progress + '%';
            card.querySelector('.order-employee').textContent = order.employeeId
                ? `–í —Ä–∞–±–æ—Ç–µ: ${gameState.employees.find(e=>e.id===order.employeeId)?.avatar}`
                : '–°–≤–æ–±–æ–¥–µ–Ω';
        }
    });
}

// --------- Drag & Drop —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã ---------
function setupOrderDragAndDrop(){
    document.querySelectorAll('.order-card').forEach(card=>{
        card.addEventListener('dragover', e=>{
            e.preventDefault(); 
            card.classList.add('drag-over');
        });
        card.addEventListener('dragleave', e=>{
            card.classList.remove('drag-over');
        });
        card.addEventListener('drop', e=>{
            e.preventDefault();
            card.classList.remove('drag-over');
            const empId = e.dataTransfer.getData('text/plain');
            assignEmployeeToOrder(empId, parseInt(card.dataset.orderId));
        });
    });
}

// --------- –ó–∞–∫–∞–∑—ã ---------
const CLIENT_NOTES_BY_TYPE = {
    "–¢–µ–ª–µ—Ñ–æ–Ω": [
        "–£—Ä–æ–Ω–∏–ª –≤ –≤–æ–¥—É, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—É–∑—ã—Ä–∏ –∏–¥—É—Ç...",
        "–°–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª —Å –æ—Ä–µ—Ö–æ–∫–æ–ª–æ–º üçéü•ú",
        "–†–∞–∑–æ–±—Ä–∞–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≥–¥–µ –∂–∏–≤—É—Ç —Å–º—Å ‚Äî –Ω–µ —Å–æ–±—Ä–∞–ª –æ–±—Ä–∞—Ç–Ω–æ",
        "–ò–≥—Ä–∞–ª –≤ –∑–º–µ–π–∫—É, –∏ –æ–Ω —Å–≥–æ—Ä–µ–ª üî•",
        "–ó–∞—Ä—è–∂–∞–ª —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫—É ‚Äî –Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è ü§∑"
    ],
    "–ù–æ—É—Ç–±—É–∫": [
        "–ö–æ—Ç —Ä–µ—à–∏–ª, —á—Ç–æ –Ω–æ—É—Ç–±—É–∫ ‚Äî —ç—Ç–æ –ª–æ—Ç–æ–∫ üêà",
        "–ó–∞–∫—Ä—ã–ª –∫—Ä—ã—à–∫—É, –∑–∞–±—ã–≤ –ø—Ä–æ –±—É—Ç–µ—Ä–±—Ä–æ–¥ –≤–Ω—É—Ç—Ä–∏ ü•™",
        "–°–∏–¥–µ–ª –Ω–∞ –Ω—ë–º –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä, —Ç–µ–ø–µ—Ä—å —ç–∫—Ä–∞–Ω —Ö—Ä—É—Å—Ç–∏—Ç",
        "–ò–≥—Ä–∞–ª –≤ Dark Souls, –Ω–æ—É—Ç –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏",
        "–ü—ã—Ç–∞–ª—Å—è –ø–æ—á–∏–Ω–∏—Ç—å —Å–∞–º ‚Äî —Ç–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ 3 –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
    ],
    "–ü–ö": [
        "–ü–æ–¥–∫–ª—é—á–∏–ª –∫ —Ä–æ–∑–µ—Ç–∫–µ —á–µ—Ä–µ–∑ –≤–∏–ª–∫—É –æ—Ç —á–∞–π–Ω–∏–∫–∞ üçµ",
        "–î—É–º–∞–ª, —á—Ç–æ –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è ‚Äî —ç—Ç–æ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å",
        "–ü–æ—Å—Ç–∞–≤–∏–ª –≤–º–µ—Å—Ç–æ –∫—É–ª–µ—Ä–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∏–∑ –ò–∫–µ–∏",
        "–ü—ã–ª–µ—Å–æ—Å–∏–ª —Å–∏—Å—Ç–µ–º–Ω–∏–∫, –∑–∞—Å–æ—Å–∞–ª–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É üåÄ",
        "–ó–∞–ø—É—Å—Ç–∏–ª —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –º–æ–ª–æ—Ç–∫–æ–º üî®"
    ],
    "–°–µ—Ä–≤–µ—Ä": [
        "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª Windows...",
        "–í —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —É—Å—Ç—Ä–æ–∏–ª –≤–µ—á–µ—Ä–∏–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –º–∏–≥–∞–µ—Ç –∫–∞–∫ –¥–∏—Å–∫–æ—Ç–µ–∫–∞",
        "–ü–æ–¥–∫–ª—é—á–∏–ª –∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ —Ä–∞–¥–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚òï",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ —Ç—É–º–±–æ—á–∫—É –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ üê†",
        "–°–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–æ —à—É–º–µ–ª ‚Äî —Ä–µ—à–∏–ª –∑–∞–ª–∏—Ç—å –º–æ–Ω—Ç–∞–∂–Ω–æ–π –ø–µ–Ω–æ–π"
    ],
    "–°—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä": [
        "–•–æ—Ç–µ–ª –º–∞–π–Ω–∏—Ç—å –±–∏—Ç–∫–æ–∏–Ω, –Ω–æ —Å–ª—É—á–∞–π–Ω–æ —Å–∂—ë–≥ –≤—Å–µ–ª–µ–Ω–Ω—É—é üî•",
        "–ü–µ—Ä–µ–ø—É—Ç–∞–ª —Å –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–π –ø—É—à–∫–æ–π ‚Äî —Ç–µ–ø–µ—Ä—å —Å–æ—Å–µ–¥–∏ –∂–∞–ª—É—é—Ç—Å—è",
        "–ó–∞–ø—É—Å—Ç–∏–ª Doom, –∞ –æ–Ω –∑–∞–ø—É—Å—Ç–∏–ª Doom –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ",
        "–†–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω —á–∞–π–Ω–∏–∫ ‚Äî –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª",
        "–°–æ—Å–µ–¥ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ —ç—Ç–æ —à–∫–∞—Ñ, –∏ –ø–æ–≤–µ—Å–∏–ª —Ç—É–¥–∞ –≤–µ—â–∏"
    ],
    "–ü–ª–∞–Ω—à–µ—Ç": [
        "–†–µ–±—ë–Ω–æ–∫ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª —Å—Ç–∏–ª—É—Å–æ–º –ø–æ —ç–∫—Ä–∞–Ω—É ‚Äî —Å—Ç–∏–ª—É—Å –±—ã–ª –æ—Ç–≤—ë—Ä—Ç–∫–æ–π üîß",
        "–•–æ—Ç–µ–ª —Å–æ–≥–Ω—É—Ç—å –∫–∞–∫ –≥–∞–∑–µ—Ç—É ‚Äî —Å–ª–æ–º–∞–ª—Å—è üìñ",
        "–ü—ã—Ç–∞–ª—Å—è –ø–æ–¥–∂–∞—Ä–∏—Ç—å —Ç–æ—Å—Ç—ã –Ω–∞ –Ω—ë–º, –Ω–µ –≤—ã—à–ª–æ üçû"
    ],
    "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å": [
        "–ö–∏–Ω—É–ª –¥–∂–æ–π—Å—Ç–∏–∫ –≤ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä, —Ç–µ–ø–µ—Ä—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ –∫–æ–Ω—Å–æ–ª—å, –Ω–∏ —Ç–µ–ª–µ–∫ üì∫",
        "–ò–≥—Ä–∞–ª 72 —á–∞—Å–∞ –ø–æ–¥—Ä—è–¥, –∫–æ–Ω—Å–æ–ª—å —Ä–µ—à–∏–ª–∞ —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫",
        "–ù–∞–ª–∏–ª —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ –≤ –¥–∏—Å–∫–æ–≤–æ–¥ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è ‚ö°"
    ],
    "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å Wi-Fi": [
        "–ü—ã—Ç–∞–ª—Å—è —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ –º–æ—Ä–æ–∑–∏–ª–∫—É ‚ùÑÔ∏è",
        "–°–æ—Å–µ–¥ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Wi-Fi –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–≤–µ—Ä—å üö™",
        "–ü–æ—Å—Ç–∞–≤–∏–ª –≤–Ω—É—Ç—Ä—å —Ä–æ—É—Ç–µ—Ä ‚Äî —Ç–µ–ø–µ—Ä—å –ª–æ–≤–∏—Ç —Ö—É–∂–µ"
    ]
};

const ORDER_TEMPLATES = [
    { type: '–¢–µ–ª–µ—Ñ–æ–Ω', minCompleted: 0, baseParts: { battery:1, cpu:1, ram:1 }, baseTime: 100, baseReward: 25 },
    { type: '–ù–æ—É—Ç–±—É–∫', minCompleted: 5, baseParts: { battery:2, cpu:1, ram:2, motherboard:1 }, baseTime: 150, baseReward: 50 },
    { type: '–ü–ö', minCompleted: 15, baseParts: { cpu:1, gpu:1, ram:2, motherboard:1, case:1 }, baseTime: 200, baseReward: 75 },
    { type: '–°–µ—Ä–≤–µ—Ä', minCompleted: 30, baseParts: { cpu:2, ram:4, motherboard:1, case:1, gpu:2 }, baseTime: 300, baseReward: 150 },
    { type: '–°—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä', minCompleted: 50, baseParts: { cpu:4, ram:8, motherboard:2, case:2, gpu:4, battery:5 }, baseTime: 500, baseReward: 1000, rare: true },
    { type: '–ü–ª–∞–Ω—à–µ—Ç', minCompleted: 10, baseParts: { battery:1, ram:2, cpu:1 }, baseTime: 120, baseReward: 40 },
    { type: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å', minCompleted: 20, baseParts: { cpu:1, gpu:1, ram:1, case:1 }, baseTime: 180, baseReward: 60 },
    { type: '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å Wi-Fi', minCompleted: 40, baseParts: { cpu:1, ram:2, motherboard:1, case:2 }, baseTime: 400, baseReward: 200 },
];

function getRandomClientNote(type) {
    const notes = CLIENT_NOTES_BY_TYPE[type];
    if (!notes || !notes.length) return "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤";
    return notes[Math.floor(Math.random() * notes.length)];
}

function createOrder(){
    if (gameState.orders.length >= GAME_CONFIG.maxOrders) return;

    const available = ORDER_TEMPLATES.filter(o => gameState.totalOrdersCompleted >= o.minCompleted);
    if (!available.length) return;

    const rareOrders = available.filter(o => o.rare);
    const normalOrders = available.filter(o => !o.rare);

    let tpl = (rareOrders.length && Math.random() < 0.1)
        ? rareOrders[Math.floor(Math.random() * rareOrders.length)]
        : normalOrders[Math.floor(Math.random() * normalOrders.length)];

    if (!tpl) return;

    const partsRequired = {};
    for (const [part, qty] of Object.entries(tpl.baseParts)) {
        partsRequired[part] = Math.max(1, Math.round(qty * (0.8 + Math.random() * 0.4)));
    }

    let reward = Math.round(tpl.baseReward * (0.8 + Math.random() * 0.4));
    if(tpl.rare) reward = Math.round(reward * 2); // —Ä–µ–¥–∫–∏–µ –∑–∞–∫–∞–∑—ã –¥–∞—é—Ç –±–æ–ª—å—à–µ

    const order = {
        id: gameState.orderCount++,
        type: tpl.type,
        partsRequired,
        initialTime: tpl.baseTime,
        timeRemaining: tpl.baseTime,
        reward,
        note: getRandomClientNote(tpl.type),
        employeeId: null,
        completed: false,
        rare: tpl.rare || false
    };

    gameState.orders.push(order);
    renderOrders();
}

// --------- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---------
function assignEmployeeToOrder(empId, orderId){
    const emp = gameState.employees.find(e=>e.id===empId);
    const order = gameState.orders.find(o=>o.id===orderId);
    if(!emp || !order) return;
    if(emp.isBusy){ showNotification('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–Ω—è—Ç','red'); return; }
    if(order.employeeId!==null){ showNotification('–ó–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è','red'); return; }

    for(const [part,qty] of Object.entries(order.partsRequired)){
        if((gameState.parts[part]||0)<qty){ showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π: ${PART_ICONS[part]}`,'red'); return; }
    }

    // –°–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å –ø–µ—Ä–∫–∞–º–∏
    for(const [part,qty] of Object.entries(order.partsRequired)){
        let actualQty = qty;
        if(emp.perks.savePartChance && Math.random()<emp.perks.savePartChance) actualQty=0;
        else if(emp.perks.breakPartChance && Math.random()<emp.perks.breakPartChance) actualQty*=2;
        gameState.parts[part] = Math.max(0,(gameState.parts[part]||0)-actualQty);
    }

    emp.isBusy = true;
    order.employeeId = emp.id;
    order.timeRemaining = order.initialTime; // <-- –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    updateUI();
}

// --------- –ú–∞–≥–∞–∑–∏–Ω ---------
function renderShop(){
    shopContentElement.innerHTML = '';
    if(gameState.currentShopTab==='parts'){
        const container = document.createElement('div'); container.className='flex flex-wrap gap-2 justify-center';
        for(const part in GAME_CONFIG.partCost){
            const partContainer = document.createElement('div'); partContainer.className='flex flex-col gap-1 items-center';
            [1,10,100].forEach(amount=>{
                const btn = document.createElement('button');
                btn.textContent=`${PART_ICONS[part]} x${amount} (üí∞${GAME_CONFIG.partCost[part]*amount})`;
                btn.className='bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded-md';
                btn.disabled = gameState.money< GAME_CONFIG.partCost[part]*amount;
                btn.dataset.action='buyPart'; btn.dataset.part=part; btn.dataset.amount=amount;
                partContainer.appendChild(btn);
            });
            container.appendChild(partContainer);
        }
        shopContentElement.appendChild(container);
    } else if(gameState.currentShopTab==='employees'){
        const btn = document.createElement('button');
        btn.textContent = `–ù–∞–Ω—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (üí∞100)`;
        btn.className='bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-full';
        btn.dataset.action='hireEmployee';
        shopContentElement.appendChild(btn);
    } else if(gameState.currentShopTab==='upgrades'){
        const btn1 = document.createElement('button');
        btn1.textContent=`–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (üí∞${GAME_CONFIG.upgradeCost})`;
        btn1.className='bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full';
        btn1.dataset.action='upgradeEmployees'; shopContentElement.appendChild(btn1);

        const btn2 = document.createElement('button');
        btn2.textContent=`–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ (üí∞${GAME_CONFIG.supplyUpgradeCost})`;
        btn2.className='bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-6 rounded-full';
        btn2.dataset.action='buySupply';
        btn2.disabled = gameState.money < GAME_CONFIG.supplyUpgradeCost || gameState.supplyActive;
        shopContentElement.appendChild(btn2);

        const btn3 = document.createElement('button');
        btn3.textContent=`–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ (üí∞${GAME_CONFIG.orderIncreaseCost})`;
        btn3.className='bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-full mt-2';
        btn3.dataset.action='expandOrders';
        btn3.disabled = gameState.money < GAME_CONFIG.orderIncreaseCost;
        shopContentElement.appendChild(btn3);

        const btnAutomation = document.createElement('button');
        btnAutomation.textContent = `–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (üí∞5000)`;
        btnAutomation.className='bg-pink-600 hover:bg-pink-700 text-white font-bold py-2 px-6 rounded-full mt-2';
        btnAutomation.dataset.action='buyAutomation';
        shopContentElement.appendChild(btnAutomation);
    }

    const resetBtn = document.createElement('button');
    resetBtn.textContent='–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É';
    resetBtn.className='bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded-full mt-4';
    resetBtn.dataset.action='resetGame';
    shopContentElement.appendChild(resetBtn);
}

// --------- –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ ---------
shopContentElement.addEventListener('click', e=>{
    const btn = e.target.closest('button'); if(!btn||btn.disabled) return;
    switch(btn.dataset.action){
        case 'buyPart': buyParts(btn.dataset.part,parseInt(btn.dataset.amount)); break;
        case 'hireEmployee': hireEmployee(); break;
        case 'upgradeEmployees': upgradeEmployees(); break;
        case 'buySupply': buySupply(); break;
        case 'expandOrders': expandOrders(); break;
        case 'buyAutomation': buyAutomation(); break;
        case 'resetGame': resetGame(); break;
    }
    renderShop();
});

// --------- –î–µ–π—Å—Ç–≤–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ ---------
function buyParts(part,amount){
    const cost = GAME_CONFIG.partCost[part]*amount;
    if(gameState.money>=cost){ gameState.money-=cost; gameState.parts[part]+=amount; updateUI(); }
    else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

function hireEmployee() {
    const cost = 100;
    if (gameState.money >= cost) {
        gameState.money -= cost;

        const avatar = GAME_CONFIG.EMPLOYEE_AVATARS[
            Math.floor(Math.random() * GAME_CONFIG.EMPLOYEE_AVATARS.length)
        ];

        const perks = {
            speedBonus: Math.random() < 0.5 ? 0.05 : 0,     // +5% —Å–∫–æ—Ä–æ—Å—Ç—å
            savePartChance: Math.random() < 0.3 ? 0.3 : 0,  // 30% —à–∞–Ω—Å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ—Ç–∞–ª—å
            breakPartChance: Math.random() < 0.1 ? 0.1 : 0, // 10% —à–∞–Ω—Å —Å–ª–æ–º–∞—Ç—å –¥–µ—Ç–∞–ª—å
            bonusReward: Math.random() < 0.2 ? 0.2 : 0,     // 20% –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞
            expBoost: Math.random() < 0.25 ? 0.5 : 0        // 50% –±—ã—Å—Ç—Ä–µ–µ —É—á–∏—Ç—Å—è
        };

        const employee = {
            id: `emp-${Date.now()}`,
            avatar,
            speed: 1,
            isBusy: false,
            ordersCompleted: 0,
            perks
        };

        gameState.employees.push(employee);

        renderEmployees();
        updateUI();
        showNotification('–ù–∞–Ω—è—Ç –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫!','green');
        saveGame();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
    }
}

function upgradeEmployees(){
    if(gameState.money>=GAME_CONFIG.upgradeCost){
        gameState.money-=GAME_CONFIG.upgradeCost;
        gameState.employees.forEach(e=>e.speed+=GAME_CONFIG.employeeSpeedIncrease);
        showNotification('–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å—Ç–∞–ª–∏ –±—ã—Å—Ç—Ä–µ–µ!','green');
        updateUI();
    } else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

let supplyIntervalId = null;
function buySupply(){
    if(gameState.money< GAME_CONFIG.supplyUpgradeCost){ showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red'); return; }
    gameState.money -= GAME_CONFIG.supplyUpgradeCost;
    gameState.supplyActive = true;
    supplyIntervalId = setInterval(()=>{
        for(const part in GAME_CONFIG.supplyAmount) gameState.parts[part]+=GAME_CONFIG.supplyAmount[part];
        showNotification('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–∫–ª–∞–¥!','green');
        updateUI();
    }, GAME_CONFIG.supplyInterval);
    showNotification('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!','green');
}

function buyAutomation(){
    if(gameState.money < 5000){
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
        return;
    }
    gameState.money -= 5000;

    // –î–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø–µ—Ä–≤–æ–º—É —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    const emp = gameState.employees.find(e => !e.autoWork);
    if(emp){
        emp.autoWork = true;
        showNotification(`${emp.avatar} —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!`, 'green');
    } else {
        showNotification('–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'yellow');
    }

    updateUI();
}

function expandOrders(){
    if(gameState.money>=GAME_CONFIG.orderIncreaseCost){
        gameState.money -= GAME_CONFIG.orderIncreaseCost;
        GAME_CONFIG.maxOrders +=5;
        showNotification('–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω!','green');
        updateUI();
    } else showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥','red');
}

function resetGame(){
    if(!confirm('–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?')) return;
    localStorage.removeItem('gameState');
    gameState.money = GAME_CONFIG.startMoney;
    gameState.parts = {...GAME_CONFIG.startParts};
    gameState.employees = [];
    gameState.orders = [];
    gameState.lastOrderTime = Date.now();
    gameState.orderCount = 0;
    const avatar = GAME_CONFIG.EMPLOYEE_AVATARS[Math.floor(Math.random()*GAME_CONFIG.EMPLOYEE_AVATARS.length)];
    gameState.employees.push({id:`emp-${Date.now()}`,avatar,speed:1,isBusy:false,ordersCompleted:0,perks:{}});
    updateUI(); renderEmployees(); renderShop();
}

function gameLoop() {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    if (Date.now() - gameState.lastOrderTime > GAME_CONFIG.orderInterval) {
        createOrder();
        gameState.lastOrderTime = Date.now();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã
    gameState.employees.forEach(emp => {
        if(emp.autoWork && !emp.isBusy){
            const order = gameState.orders.find(o => !o.employeeId);
            if(order) assignEmployeeToOrder(emp.id, order.id);
        }
    });

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    gameState.orders.forEach(order => {
        if(order.employeeId){
            const emp = gameState.employees.find(e=>e.id===order.employeeId);
            if(emp){
                const speedWithPerks = emp.speed * (1 + (emp.perks?.speedBonus || 0));
                order.timeRemaining -= speedWithPerks;

                if(order.timeRemaining <= 0 && !order.completed){
                    gameState.money += order.reward;
                    gameState.totalOrdersCompleted++;
                    emp.isBusy = false;
                    emp.ordersCompleted++;
                    if(emp.ordersCompleted % GAME_CONFIG.employeeSpeedIncrementEvery === 0 &&
                        emp.speed < GAME_CONFIG.employeeMaxSpeed) emp.speed += 1;
                    renderEmployees()    
                    order.completed = true;
                }
            }
        }
    });

    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    gameState.orders = gameState.orders.filter(o=>!o.completed);

    updateUI();
    saveGame();
}

const GAME_VERSION = '0.0.2'; 

function saveGame() {
    const stateToSave = { ...gameState, _version: GAME_VERSION };
    localStorage.setItem('gameState', JSON.stringify(stateToSave));
}

function loadGame() {
    const saved = localStorage.getItem('gameState');
    if (saved) {
        const parsed = JSON.parse(saved);

        if (parsed._version !== GAME_VERSION) {
            localStorage.removeItem('gameState');
            return;
        }

        gameState = parsed;

        gameState.employees.forEach(emp => {
            if (emp.isBusy === undefined) emp.isBusy = false;
            if (emp.speed === undefined) emp.speed = 1;
            if (emp.ordersCompleted === undefined) emp.ordersCompleted = 0;
            if (emp.autoWork === undefined) emp.autoWork = false;
        });
    }
}

// --------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---------
function showNotification(msg,color){
    const n = document.createElement('div'); n.textContent=msg;
    n.style.background=color; n.style.color='white';
    n.style.padding='10px'; n.style.borderRadius='8px';
    n.style.position='fixed'; n.style.top='20px'; n.style.right='20px'; n.style.zIndex='1000';
    document.body.appendChild(n);
    setTimeout(()=>{n.style.opacity='0'; setTimeout(()=>n.remove(),500)},2000);
}

// --------- –í–∫–ª–∞–¥–∫–∏ ---------
shopPartsBtn.addEventListener('click',()=>{gameState.currentShopTab='parts'; renderShop();});
shopEmployeesBtn.addEventListener('click',()=>{gameState.currentShopTab='employees'; renderShop();});
shopUpgradesBtn.addEventListener('click',()=>{gameState.currentShopTab='upgrades'; renderShop();});

// --------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------
loadGame();
updateUI();
renderEmployees();
renderOrders();
renderShop();
setInterval(gameLoop,100);
setInterval(saveGame,1000);



